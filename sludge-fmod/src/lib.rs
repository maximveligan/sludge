#![feature(arc_mutate_strong_count)]

use ::{sludge::prelude::*, sludge_fmod_sys::*};

pub mod bank;
pub mod event;
pub mod fmod;

pub use bank::*;
pub use event::*;
pub use fmod::*;

trait CheckError {
    fn check_err(self) -> Result<()>;
}

impl CheckError for FMOD_RESULT {
    fn check_err(self) -> Result<()> {
        if self == FMOD_RESULT_FMOD_OK {
            return Ok(());
        }

        match self {
            FMOD_RESULT_FMOD_ERR_ALREADY_LOCKED => bail!("FMOD_RESULT_FMOD_ERR_ALREADY_LOCKED"),
            FMOD_RESULT_FMOD_ERR_BADCOMMAND => bail!("FMOD_RESULT_FMOD_ERR_BADCOMMAND"),
            FMOD_RESULT_FMOD_ERR_CHANNEL_ALLOC => bail!("FMOD_RESULT_FMOD_ERR_CHANNEL_ALLOC"),
            FMOD_RESULT_FMOD_ERR_CHANNEL_STOLEN => bail!("FMOD_RESULT_FMOD_ERR_CHANNEL_STOLEN"),
            FMOD_RESULT_FMOD_ERR_DMA => bail!("FMOD_RESULT_FMOD_ERR_DMA"),
            FMOD_RESULT_FMOD_ERR_DSP_CONNECTION => bail!("FMOD_RESULT_FMOD_ERR_DSP_CONNECTION"),
            FMOD_RESULT_FMOD_ERR_DSP_DONTPROCESS => bail!("FMOD_RESULT_FMOD_ERR_DSP_DONTPROCESS"),
            FMOD_RESULT_FMOD_ERR_DSP_FORMAT => bail!("FMOD_RESULT_FMOD_ERR_DSP_FORMAT"),
            FMOD_RESULT_FMOD_ERR_DSP_INUSE => bail!("FMOD_RESULT_FMOD_ERR_DSP_INUSE"),
            FMOD_RESULT_FMOD_ERR_DSP_NOTFOUND => bail!("FMOD_RESULT_FMOD_ERR_DSP_NOTFOUND"),
            FMOD_RESULT_FMOD_ERR_DSP_RESERVED => bail!("FMOD_RESULT_FMOD_ERR_DSP_RESERVED"),
            FMOD_RESULT_FMOD_ERR_DSP_SILENCE => bail!("FMOD_RESULT_FMOD_ERR_DSP_SILENCE"),
            FMOD_RESULT_FMOD_ERR_DSP_TYPE => bail!("FMOD_RESULT_FMOD_ERR_DSP_TYPE"),
            FMOD_RESULT_FMOD_ERR_EVENT_ALREADY_LOADED => {
                bail!("FMOD_RESULT_FMOD_ERR_EVENT_ALREADY_LOADED")
            }
            FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_BUSY => {
                bail!("FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_BUSY")
            }
            FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH => {
                bail!("FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH")
            }
            FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT => {
                bail!("FMOD_RESULT_FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT")
            }
            FMOD_RESULT_FMOD_ERR_EVENT_NOTFOUND => bail!("FMOD_RESULT_FMOD_ERR_EVENT_NOTFOUND"),
            FMOD_RESULT_FMOD_ERR_FILE_BAD => bail!("FMOD_RESULT_FMOD_ERR_FILE_BAD"),
            FMOD_RESULT_FMOD_ERR_FILE_COULDNOTSEEK => {
                bail!("FMOD_RESULT_FMOD_ERR_FILE_COULDNOTSEEK")
            }
            FMOD_RESULT_FMOD_ERR_FILE_DISKEJECTED => bail!("FMOD_RESULT_FMOD_ERR_FILE_DISKEJECTED"),
            FMOD_RESULT_FMOD_ERR_FILE_ENDOFDATA => bail!("FMOD_RESULT_FMOD_ERR_FILE_ENDOFDATA"),
            FMOD_RESULT_FMOD_ERR_FILE_EOF => bail!("FMOD_RESULT_FMOD_ERR_FILE_EOF"),
            FMOD_RESULT_FMOD_ERR_FILE_NOTFOUND => bail!("FMOD_RESULT_FMOD_ERR_FILE_NOTFOUND"),
            FMOD_RESULT_FMOD_ERR_FORMAT => bail!("FMOD_RESULT_FMOD_ERR_FORMAT"),
            FMOD_RESULT_FMOD_ERR_HEADER_MISMATCH => bail!("FMOD_RESULT_FMOD_ERR_HEADER_MISMATCH"),
            FMOD_RESULT_FMOD_ERR_HTTP => bail!("FMOD_RESULT_FMOD_ERR_HTTP"),
            FMOD_RESULT_FMOD_ERR_HTTP_ACCESS => bail!("FMOD_RESULT_FMOD_ERR_HTTP_ACCESS"),
            FMOD_RESULT_FMOD_ERR_HTTP_PROXY_AUTH => bail!("FMOD_RESULT_FMOD_ERR_HTTP_PROXY_AUTH"),
            FMOD_RESULT_FMOD_ERR_HTTP_SERVER_ERROR => {
                bail!("FMOD_RESULT_FMOD_ERR_HTTP_SERVER_ERROR")
            }
            FMOD_RESULT_FMOD_ERR_HTTP_TIMEOUT => bail!("FMOD_RESULT_FMOD_ERR_HTTP_TIMEOUT"),
            FMOD_RESULT_FMOD_ERR_INITIALIZATION => bail!("FMOD_RESULT_FMOD_ERR_INITIALIZATION"),
            FMOD_RESULT_FMOD_ERR_INITIALIZED => bail!("FMOD_RESULT_FMOD_ERR_INITIALIZED"),
            FMOD_RESULT_FMOD_ERR_INTERNAL => bail!("FMOD_RESULT_FMOD_ERR_INTERNAL"),
            FMOD_RESULT_FMOD_ERR_INVALID_FLOAT => bail!("FMOD_RESULT_FMOD_ERR_INVALID_FLOAT"),
            FMOD_RESULT_FMOD_ERR_INVALID_HANDLE => bail!("FMOD_RESULT_FMOD_ERR_INVALID_HANDLE"),
            FMOD_RESULT_FMOD_ERR_INVALID_PARAM => bail!("FMOD_RESULT_FMOD_ERR_INVALID_PARAM"),
            FMOD_RESULT_FMOD_ERR_INVALID_POSITION => bail!("FMOD_RESULT_FMOD_ERR_INVALID_POSITION"),
            FMOD_RESULT_FMOD_ERR_INVALID_SPEAKER => bail!("FMOD_RESULT_FMOD_ERR_INVALID_SPEAKER"),
            FMOD_RESULT_FMOD_ERR_INVALID_STRING => bail!("FMOD_RESULT_FMOD_ERR_INVALID_STRING"),
            FMOD_RESULT_FMOD_ERR_INVALID_SYNCPOINT => {
                bail!("FMOD_RESULT_FMOD_ERR_INVALID_SYNCPOINT")
            }
            FMOD_RESULT_FMOD_ERR_INVALID_THREAD => bail!("FMOD_RESULT_FMOD_ERR_INVALID_THREAD"),
            FMOD_RESULT_FMOD_ERR_INVALID_VECTOR => bail!("FMOD_RESULT_FMOD_ERR_INVALID_VECTOR"),
            FMOD_RESULT_FMOD_ERR_MAXAUDIBLE => bail!("FMOD_RESULT_FMOD_ERR_MAXAUDIBLE"),
            FMOD_RESULT_FMOD_ERR_MEMORY => bail!("FMOD_RESULT_FMOD_ERR_MEMORY"),
            FMOD_RESULT_FMOD_ERR_MEMORY_CANTPOINT => bail!("FMOD_RESULT_FMOD_ERR_MEMORY_CANTPOINT"),
            FMOD_RESULT_FMOD_ERR_NEEDS3D => bail!("FMOD_RESULT_FMOD_ERR_NEEDS3D"),
            FMOD_RESULT_FMOD_ERR_NEEDSHARDWARE => bail!("FMOD_RESULT_FMOD_ERR_NEEDSHARDWARE"),
            FMOD_RESULT_FMOD_ERR_NET_CONNECT => bail!("FMOD_RESULT_FMOD_ERR_NET_CONNECT"),
            FMOD_RESULT_FMOD_ERR_NET_SOCKET_ERROR => bail!("FMOD_RESULT_FMOD_ERR_NET_SOCKET_ERROR"),
            FMOD_RESULT_FMOD_ERR_NET_URL => bail!("FMOD_RESULT_FMOD_ERR_NET_URL"),
            FMOD_RESULT_FMOD_ERR_NET_WOULD_BLOCK => bail!("FMOD_RESULT_FMOD_ERR_NET_WOULD_BLOCK"),
            FMOD_RESULT_FMOD_ERR_NOTREADY => bail!("FMOD_RESULT_FMOD_ERR_NOTREADY"),
            FMOD_RESULT_FMOD_ERR_NOT_LOCKED => bail!("FMOD_RESULT_FMOD_ERR_NOT_LOCKED"),
            FMOD_RESULT_FMOD_ERR_OUTPUT_ALLOCATED => bail!("FMOD_RESULT_FMOD_ERR_OUTPUT_ALLOCATED"),
            FMOD_RESULT_FMOD_ERR_OUTPUT_CREATEBUFFER => {
                bail!("FMOD_RESULT_FMOD_ERR_OUTPUT_CREATEBUFFER")
            }
            FMOD_RESULT_FMOD_ERR_OUTPUT_DRIVERCALL => {
                bail!("FMOD_RESULT_FMOD_ERR_OUTPUT_DRIVERCALL")
            }
            FMOD_RESULT_FMOD_ERR_OUTPUT_FORMAT => bail!("FMOD_RESULT_FMOD_ERR_OUTPUT_FORMAT"),
            FMOD_RESULT_FMOD_ERR_OUTPUT_INIT => bail!("FMOD_RESULT_FMOD_ERR_OUTPUT_INIT"),
            FMOD_RESULT_FMOD_ERR_OUTPUT_NODRIVERS => bail!("FMOD_RESULT_FMOD_ERR_OUTPUT_NODRIVERS"),
            FMOD_RESULT_FMOD_ERR_PLUGIN => bail!("FMOD_RESULT_FMOD_ERR_PLUGIN"),
            FMOD_RESULT_FMOD_ERR_PLUGIN_MISSING => bail!("FMOD_RESULT_FMOD_ERR_PLUGIN_MISSING"),
            FMOD_RESULT_FMOD_ERR_PLUGIN_RESOURCE => bail!("FMOD_RESULT_FMOD_ERR_PLUGIN_RESOURCE"),
            FMOD_RESULT_FMOD_ERR_PLUGIN_VERSION => bail!("FMOD_RESULT_FMOD_ERR_PLUGIN_VERSION"),
            FMOD_RESULT_FMOD_ERR_RECORD => bail!("FMOD_RESULT_FMOD_ERR_RECORD"),
            FMOD_RESULT_FMOD_ERR_RECORD_DISCONNECTED => {
                bail!("FMOD_RESULT_FMOD_ERR_RECORD_DISCONNECTED")
            }
            FMOD_RESULT_FMOD_ERR_REVERB_CHANNELGROUP => {
                bail!("FMOD_RESULT_FMOD_ERR_REVERB_CHANNELGROUP")
            }
            FMOD_RESULT_FMOD_ERR_REVERB_INSTANCE => bail!("FMOD_RESULT_FMOD_ERR_REVERB_INSTANCE"),
            FMOD_RESULT_FMOD_ERR_STUDIO_NOT_LOADED => {
                bail!("FMOD_RESULT_FMOD_ERR_STUDIO_NOT_LOADED")
            }
            FMOD_RESULT_FMOD_ERR_STUDIO_UNINITIALIZED => {
                bail!("FMOD_RESULT_FMOD_ERR_STUDIO_UNINITIALIZED")
            }
            FMOD_RESULT_FMOD_ERR_SUBSOUNDS => bail!("FMOD_RESULT_FMOD_ERR_SUBSOUNDS"),
            FMOD_RESULT_FMOD_ERR_SUBSOUND_ALLOCATED => {
                bail!("FMOD_RESULT_FMOD_ERR_SUBSOUND_ALLOCATED")
            }
            FMOD_RESULT_FMOD_ERR_SUBSOUND_CANTMOVE => {
                bail!("FMOD_RESULT_FMOD_ERR_SUBSOUND_CANTMOVE")
            }
            FMOD_RESULT_FMOD_ERR_TAGNOTFOUND => bail!("FMOD_RESULT_FMOD_ERR_TAGNOTFOUND"),
            FMOD_RESULT_FMOD_ERR_TOOMANYCHANNELS => bail!("FMOD_RESULT_FMOD_ERR_TOOMANYCHANNELS"),
            FMOD_RESULT_FMOD_ERR_TOOMANYSAMPLES => bail!("FMOD_RESULT_FMOD_ERR_TOOMANYSAMPLES"),
            FMOD_RESULT_FMOD_ERR_TRUNCATED => bail!("FMOD_RESULT_FMOD_ERR_TRUNCATED"),
            FMOD_RESULT_FMOD_ERR_UNIMPLEMENTED => bail!("FMOD_RESULT_FMOD_ERR_UNIMPLEMENTED"),
            FMOD_RESULT_FMOD_ERR_UNINITIALIZED => bail!("FMOD_RESULT_FMOD_ERR_UNINITIALIZED"),
            FMOD_RESULT_FMOD_ERR_UNSUPPORTED => bail!("FMOD_RESULT_FMOD_ERR_UNSUPPORTED"),
            FMOD_RESULT_FMOD_ERR_VERSION => bail!("FMOD_RESULT_FMOD_ERR_VERSION"),
            other => unreachable!("unknown FMOD_RESULT error code: {}", other),
        }
    }
}
